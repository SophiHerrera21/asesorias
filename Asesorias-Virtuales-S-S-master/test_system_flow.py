#!/usr/bin/env python
"""
Script de prueba para verificar el flujo completo del sistema de asesor√≠as virtuales.
Verifica: registro, login, validaci√≥n de contrase√±as, creaci√≥n de objetos relacionados,
y manejo de errores.
"""

import os
import sys
import django
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'asesorias_virtuales.settings')
django.setup()

from django.contrib.auth import authenticate
from django.core.exceptions import ValidationError
from apps.usuarios.models import Usuario, Aprendiz, Asesor, Coordinador
from apps.usuarios.forms import UsuarioForm, AsesorRegistroForm
from apps.grupos.models import Grupo
from apps.pqrs.models import PQRS
from apps.pruebas.models import Prueba

def test_password_validation():
    """Prueba la validaci√≥n de contrase√±as"""
    print("üîê Probando validaci√≥n de contrase√±as...")
    
    # Probar contrase√±a muy corta
    form_data = {
        'first_name': 'Test',
        'last_name': 'User',
        'email': 'test@example.com',
        'documento': '12345678',
        'role': 'aprendiz',
        'telefono': '123456789',
        'direccion': 'Test Address',
        'password1': '123',  # Muy corta
        'password2': '123'
    }
    
    form = UsuarioForm(data=form_data)
    if not form.is_valid():
        print("‚úÖ Validaci√≥n de contrase√±a corta funciona correctamente")
        for field, errors in form.errors.items():
            print(f"   Error en {field}: {errors}")
    else:
        print("‚ùå Error: La contrase√±a corta deber√≠a ser rechazada")
    
    # Probar contrase√±a v√°lida
    form_data['password1'] = 'password123'
    form_data['password2'] = 'password123'
    
    form = UsuarioForm(data=form_data)
    if form.is_valid():
        print("‚úÖ Validaci√≥n de contrase√±a v√°lida funciona correctamente")
    else:
        print("‚ùå Error: La contrase√±a v√°lida deber√≠a ser aceptada")
        for field, errors in form.errors.items():
            print(f"   Error en {field}: {errors}")

def test_user_creation():
    """Prueba la creaci√≥n de usuarios con objetos relacionados"""
    print("\nüë§ Probando creaci√≥n de usuarios...")
    
    # Crear usuario aprendiz
    try:
        user_data = {
            'first_name': 'Juan',
            'last_name': 'P√©rez',
            'email': 'juan.perez@test.com',
            'documento': '123456789',
            'role': 'aprendiz',
            'telefono': '3001234567',
            'direccion': 'Calle 123 #45-67',
            'password1': 'password123',
            'password2': 'password123'
        }
        
        form = UsuarioForm(data=user_data)
        if form.is_valid():
            user = form.save(commit=False)
            user.role = 'aprendiz'
            user.username = user.email
            user.set_password(form.cleaned_data['password1'])
            user.save()
            
            # Crear objeto Aprendiz relacionado
            Aprendiz.objects.create(
                usuario=user,
                ficha='FICHA123',
                programa='T√©cnico en Sistemas',
                trimestre='2'
            )
            
            print(f"‚úÖ Usuario aprendiz creado: {user.email}")
            
            # Verificar que el objeto relacionado existe
            if hasattr(user, 'aprendiz'):
                print(f"‚úÖ Objeto Aprendiz creado: Ficha {user.aprendiz.ficha}")
            else:
                print("‚ùå Error: Objeto Aprendiz no encontrado")
            
            return user
        else:
            print("‚ùå Error en formulario de aprendiz:")
            for field, errors in form.errors.items():
                print(f"   {field}: {errors}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error creando usuario aprendiz: {e}")
        return None

def test_authentication():
    """Prueba la autenticaci√≥n de usuarios"""
    print("\nüîë Probando autenticaci√≥n...")
    
    # Crear usuario de prueba
    user = test_user_creation()
    if not user:
        print("‚ùå No se pudo crear usuario para prueba de autenticaci√≥n")
        return
    
    # Probar autenticaci√≥n correcta
    authenticated_user = authenticate(username=user.email, password='password123')
    if authenticated_user:
        print(f"‚úÖ Autenticaci√≥n exitosa: {authenticated_user.email}")
        print(f"   Rol: {authenticated_user.role}")
        print(f"   Activo: {authenticated_user.is_active}")
    else:
        print("‚ùå Error: La autenticaci√≥n deber√≠a ser exitosa")
    
    # Probar autenticaci√≥n con contrase√±a incorrecta
    wrong_auth = authenticate(username=user.email, password='wrongpassword')
    if not wrong_auth:
        print("‚úÖ Autenticaci√≥n con contrase√±a incorrecta rechazada correctamente")
    else:
        print("‚ùå Error: La autenticaci√≥n con contrase√±a incorrecta deber√≠a fallar")
    
    # Limpiar usuario de prueba
    user.delete()

def test_form_persistence():
    """Prueba que los formularios mantengan la informaci√≥n en caso de error"""
    print("\nüìù Probando persistencia de formularios...")
    
    # Crear datos de formulario con error
    form_data = {
        'first_name': 'Mar√≠a',
        'last_name': 'Garc√≠a',
        'email': 'maria.garcia@test.com',
        'documento': '987654321',
        'role': 'asesor',
        'telefono': '3009876543',
        'direccion': 'Avenida 456 #78-90',
        'password1': '123',  # Contrase√±a muy corta para causar error
        'password2': '123'
    }
    
    form = AsesorRegistroForm(data=form_data)
    if not form.is_valid():
        print("‚úÖ Formulario detecta errores correctamente")
        print("   Datos del formulario se mantienen:")
        for field, value in form_data.items():
            if field not in ['password1', 'password2']:
                print(f"   {field}: {value}")
        
        # Verificar que los campos mantienen sus valores
        if form.data.get('first_name') == 'Mar√≠a':
            print("‚úÖ Campo first_name mantiene su valor")
        else:
            print("‚ùå Error: Campo first_name no mantiene su valor")
    else:
        print("‚ùå Error: El formulario deber√≠a detectar errores")

def test_url_patterns():
    """Verifica que las URLs principales existan"""
    print("\nüîó Verificando patrones de URL...")
    
    try:
        from django.urls import reverse
        from django.urls.exceptions import NoReverseMatch
        
        # URLs principales a verificar
        urls_to_test = [
            'usuarios:home',
            'usuarios:login',
            'usuarios:seleccionar_rol',
            'usuarios:registro_aprendiz',
            'usuarios:registro_asesor',
            'usuarios:registro_coordinador',
            'usuarios:dashboard_aprendiz',
            'usuarios:dashboard_asesor',
            'usuarios:dashboard_coordinador',
        ]
        
        for url_name in urls_to_test:
            try:
                url = reverse(url_name)
                print(f"‚úÖ URL {url_name}: {url}")
            except NoReverseMatch:
                print(f"‚ùå URL {url_name}: No encontrada")
                
    except Exception as e:
        print(f"‚ùå Error verificando URLs: {e}")

def test_template_existence():
    """Verifica que los templates principales existan"""
    print("\nüìÑ Verificando templates...")
    
    import os
    template_dir = "apps/usuarios/templates/usuarios"
    
    templates_to_check = [
        'home.html',
        'login.html',
        'seleccionar_rol.html',
        'registro_aprendiz.html',
        'registro_asesor.html',
        'registro_coordinador.html',
        'dashboard_aprendiz.html',
        'dashboard_asesor.html',
        'dashboard_coordinador.html',
        'form_usuario.html',
        'cambiar_password.html',
        'crear_grupo.html',
        'crear_pqrs.html',
        'crear_prueba.html',
    ]
    
    for template in templates_to_check:
        template_path = os.path.join(template_dir, template)
        if os.path.exists(template_path):
            print(f"‚úÖ Template {template}: Existe")
        else:
            print(f"‚ùå Template {template}: No encontrado")

def main():
    """Funci√≥n principal que ejecuta todas las pruebas"""
    print("üöÄ Iniciando pruebas del sistema de asesor√≠as virtuales")
    print("=" * 60)
    
    try:
        test_password_validation()
        test_authentication()
        test_form_persistence()
        test_url_patterns()
        test_template_existence()
        
        print("\n" + "=" * 60)
        print("‚úÖ Todas las pruebas completadas")
        print("üìä Resumen:")
        print("   - Validaci√≥n de contrase√±as: Implementada")
        print("   - Autenticaci√≥n: Funcional")
        print("   - Persistencia de formularios: Implementada")
        print("   - URLs: Verificadas")
        print("   - Templates: Verificados")
        
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 